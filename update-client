#!/bin/bash
#
# set this script in your ~/.ssh/authorized_keys as
# command="/path/to/update-client <HOSTNAME>" <KEY>
# to only allow calls to this script for that key
#

# where are we?
BASEDIR=/home/dns-update

# zonefile basic configuration
ZONEFILE_INPUT="${BASEDIR}"/config/zonefile.input

# where to put the new zone file
ZONEFILE_OUTPUT="${BASEDIR}"/zones/dynip.example.com.zone

# where to put the source snippets
HOSTS_DIR="${BASEDIR}"/hosts

# combined host entry files
HOSTS_CUR="${HOSTS_DIR}"/allhosts.cur
HOSTS_NEW="${HOSTS_DIR}"/allhosts.new

# lockfile
LOCKFILE="${HOSTS_DIR}"/.flock

# currently, the hostname is tied to the SSH key via authorized_keys
# TODO: this could also be a parameter from the client to support multiple hosts per key
HOSTNAME="${1}"

# get parameters from client
set -- ${SSH_ORIGINAL_COMMAND}

# check for the first argument to be something like update-client, with or without path
case "${1}" in
    *update-client)
        ;;
    *)
        echo "need 'update-client' as first parameter"
        exit 1
        ;;
esac

# the second parameter is the new IP ADDRESS
# (simple) validation is done later by the zone generator
IPADDRESS="${2}"

# automatic IP ADDRESS detection:
# use connection source ip
if [ "${IPADDRESS}" = 'auto' ] ; then
    set -- ${SSH_CONNECTION}
    IPADDRESS=${1}
    # print current IP as the client obviously does not know it
    echo $IPADDRESS
fi

# some simple sanity checks
if [ -z "${HOSTNAME}" ] ; then
    echo "no hostname given"
    exit 1
fi
if [ -z "${IPADDRESS}" ] ; then
    echo "no IP address given"
    exit 1
fi


# write client IP to snippet file
SNIPPETFILE="${HOSTS_DIR}/${HOSTNAME}"
if [[ "${IPADDRESS}" =~ : ]]; then
    # append _6 to filename for addresses that look like IPv6
    # this allows two addresses per hostname (IPv4 and IPv6)
    SNIPPETFILE="${SNIPPETFILE}_6"
fi
echo "${IPADDRESS}" > "${SNIPPETFILE}"

(
    # use fd 9 as lockfile
    flock -w 60 9

    # combine snippet files:

    # find nicely formatted IPv4 host snippet files and collect them
    # (please: no line breaks in file names - DNS does not support this anyway)
    # TODO: simple check for valid hostnames
    # TODO: more complete check for IP addresses, this currently allows "999.555.333.111" like seen on TV
    grep -HE '^[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}$' "${HOSTS_DIR}"/* \
	| sort \
	| sed 's/:/ /' \
	      > "${HOSTS_NEW}"

    # find IPv6 host snippet files and append them
    # (please: no line breaks in file names - DNS does not support this anyway)
    # TODO: simple check for valid hostnames
    # TODO: more complete check for IP addresses, this is currently totally basic
    grep -HE '^[0-9a-fA-F.:]+:[0-9a-fA-F.:]+$' "${HOSTS_DIR}"/* \
	| sort \
	| sed 's/_6:/ /' \
	      >> "${HOSTS_NEW}"

    # create current combined file if absent, otherwise mark as updated
    touch "${HOSTS_CUR}"

    # check for changes to process
    if cmp -s "${HOSTS_NEW}" "${HOSTS_CUR}" ; then

	# new file is uneccessary
	rm "${HOSTS_NEW}"

    else

	# declare new file as current file
	mv "${HOSTS_NEW}" "${HOSTS_CUR}"

	# back up zone file if current file exists and has contents
	if [ -f "${ZONEFILE_OUTPUT}" -a -s "${ZONEFILE_OUTPUT}" ] ; then
	    mv "${ZONEFILE_OUTPUT}" "${ZONEFILE_OUTPUT}.bak"
	fi

	# serial has 1 second resolution, so wait one second to not accidentially
	# generate the same serial twice (yeah, cheap lame hack, but come on...)
	sleep 1

	# generate serial
	SERIAL=$(date +%Y%m%d%H%M%S)

	# generate new zone file
	sed "s/§SERIAL§/${SERIAL}/" < "${ZONEFILE_INPUT}" > "${ZONEFILE_OUTPUT}"

	# read hostnames and append to zonefile
	while read FILENAME IPADDRESS; do
	    HOSTNAME="$(basename "${FILENAME}")"
	    TYPE=A
	    if [[ "${IPADDRESS}" =~ : ]]; then
		TYPE=AAAA
	    fi
	    printf '%-32s %s %-15s ;\n' "${HOSTNAME}" "${TYPE}" "${IPADDRESS}"
	done < "${HOSTS_CUR}" >> "${ZONEFILE_OUTPUT}"

	# reload the nameserver
	sudo /bin/systemctl reload nsd

    fi

) 9>"${LOCKFILE}"
